package RTT.corba;


/**
* RTT/corba/_CConfigurationInterfaceStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ConfigurationInterface.idl
* Wednesday, July 11, 2012 5:26:13 PM CEST
*/


/**
	 * Exposes both attributes and properties
	 * of a service.
	 * @ingroup CompIDL
	 */
public class _CConfigurationInterfaceStub extends org.omg.CORBA.portable.ObjectImpl implements RTT.corba.CConfigurationInterface
{

  public String[] getAttributeList ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAttributeList", true);
                $in = _invoke ($out);
                String $result[] = RTT.corba.CConfigurationInterfacePackage.CAttributeNamesHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getAttributeList (        );
            } finally {
                _releaseReply ($in);
            }
  } // getAttributeList

  public RTT.corba.CConfigurationInterfacePackage.CProperty[] getPropertyList ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getPropertyList", true);
                $in = _invoke ($out);
                RTT.corba.CConfigurationInterfacePackage.CProperty $result[] = RTT.corba.CConfigurationInterfacePackage.CPropertyNamesHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getPropertyList (        );
            } finally {
                _releaseReply ($in);
            }
  } // getPropertyList

  public org.omg.CORBA.Any getAttribute (String name)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAttribute", true);
                $out.write_string (name);
                $in = _invoke ($out);
                org.omg.CORBA.Any $result = $in.read_any ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getAttribute (name        );
            } finally {
                _releaseReply ($in);
            }
  } // getAttribute

  public boolean setAttribute (String name, org.omg.CORBA.Any value)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setAttribute", true);
                $out.write_string (name);
                $out.write_any (value);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return setAttribute (name, value        );
            } finally {
                _releaseReply ($in);
            }
  } // setAttribute

  public boolean hasAttribute (String name)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("hasAttribute", true);
                $out.write_string (name);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return hasAttribute (name        );
            } finally {
                _releaseReply ($in);
            }
  } // hasAttribute

  public boolean hasProperty (String name)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("hasProperty", true);
                $out.write_string (name);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return hasProperty (name        );
            } finally {
                _releaseReply ($in);
            }
  } // hasProperty


  /**
  	     * Get a property by name. You can scope the name for
  	     * entering sub-properties. For example 'controlparameters.gains.k'
  	     * to retrieve nested property with name 'k'.
  	     */
  public org.omg.CORBA.Any getProperty (String name)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getProperty", true);
                $out.write_string (name);
                $in = _invoke ($out);
                org.omg.CORBA.Any $result = $in.read_any ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getProperty (name        );
            } finally {
                _releaseReply ($in);
            }
  } // getProperty


  /**
  	     * Set a property by name. You can scope the name for
  	     * entering sub-properties. For example 'controlparameters.gains.k'
  	     * to write nested property with name 'k'.
  	     */
  public boolean setProperty (String name, org.omg.CORBA.Any value)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setProperty", true);
                $out.write_string (name);
                $out.write_any (value);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return setProperty (name, value        );
            } finally {
                _releaseReply ($in);
            }
  } // setProperty


  /**
  	     * Return the type of the attribute or property.
  	     */
  public String getPropertyType (String name)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getPropertyType", true);
                $out.write_string (name);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getPropertyType (name        );
            } finally {
                _releaseReply ($in);
            }
  } // getPropertyType

  public String getAttributeType (String name)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAttributeType", true);
                $out.write_string (name);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getAttributeType (name        );
            } finally {
                _releaseReply ($in);
            }
  } // getAttributeType


  /**
  	     * Return the type name of the expression as it is known
  	     * to the Orocos Type System.
  	     */
  public String getPropertyTypeName (String name)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getPropertyTypeName", true);
                $out.write_string (name);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getPropertyTypeName (name        );
            } finally {
                _releaseReply ($in);
            }
  } // getPropertyTypeName

  public String getAttributeTypeName (String name)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAttributeTypeName", true);
                $out.write_string (name);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getAttributeTypeName (name        );
            } finally {
                _releaseReply ($in);
            }
  } // getAttributeTypeName


  /**
  	     * Return the result of an attribute or property as a text string.
  	     */
  public String attributeToString (String name)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("attributeToString", true);
                $out.write_string (name);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return attributeToString (name        );
            } finally {
                _releaseReply ($in);
            }
  } // attributeToString

  public String propertyToString (String name)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("propertyToString", true);
                $out.write_string (name);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return propertyToString (name        );
            } finally {
                _releaseReply ($in);
            }
  } // propertyToString


  /**
  	     * Assign a given property or attribute a stringified value.
  	     * @return true if the assignment could be done.
  	     */
  public boolean attributeFromString (String name, String value)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("attributeFromString", true);
                $out.write_string (name);
                $out.write_string (value);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return attributeFromString (name, value        );
            } finally {
                _releaseReply ($in);
            }
  } // attributeFromString

  public boolean propertyFromString (String name, String value)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("propertyFromString", true);
                $out.write_string (name);
                $out.write_string (value);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return propertyFromString (name, value        );
            } finally {
                _releaseReply ($in);
            }
  } // propertyFromString


  /**
  	     * Returns true if the attribute can be changed.
  	     */
  public boolean isAttributeAssignable (String name)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("isAttributeAssignable", true);
                $out.write_string (name);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return isAttributeAssignable (name        );
            } finally {
                _releaseReply ($in);
            }
  } // isAttributeAssignable

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:RTT/corba/CConfigurationInterface:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _CConfigurationInterfaceStub
