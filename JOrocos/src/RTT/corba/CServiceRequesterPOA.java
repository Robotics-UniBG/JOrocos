package RTT.corba;


/**
* RTT/corba/CServiceRequesterPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ServiceRequester.idl
* Wednesday, July 11, 2012 5:27:05 PM CEST
*/


/**
	 * An Orocos Required Service.
	 * Exposes that this component requires certain services.
	 * @ingroup CompIDL
	 */
public abstract class CServiceRequesterPOA extends org.omg.PortableServer.Servant
 implements RTT.corba.CServiceRequesterOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getRequestName", new java.lang.Integer (0));
    _methods.put ("getRequestNames", new java.lang.Integer (1));
    _methods.put ("getOperationCallerNames", new java.lang.Integer (2));
    _methods.put ("getRequest", new java.lang.Integer (3));
    _methods.put ("hasRequest", new java.lang.Integer (4));
    _methods.put ("connectTo", new java.lang.Integer (5));
    _methods.put ("connectCallerTo", new java.lang.Integer (6));
    _methods.put ("ready", new java.lang.Integer (7));
    _methods.put ("disconnectCaller", new java.lang.Integer (8));
    _methods.put ("callerReady", new java.lang.Integer (9));
    _methods.put ("disconnect", new java.lang.Integer (10));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
  	     * Return the name of this service.
  	     */
       case 0:  // RTT/corba/CServiceRequester/getRequestName
       {
         String $result = null;
         $result = this.getRequestName ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /**
  	     * Get a list of all the child requests this request offers.
  	     */
       case 1:  // RTT/corba/CServiceRequester/getRequestNames
       {
         String $result[] = null;
         $result = this.getRequestNames ();
         out = $rh.createReply();
         RTT.corba.CRequestNamesHelper.write (out, $result);
         break;
       }


  /**
  	     * Returns the methods required by this requester.
  	     */
       case 2:  // RTT/corba/CServiceRequester/getOperationCallerNames
       {
         String $result[] = null;
         $result = this.getOperationCallerNames ();
         out = $rh.createReply();
         RTT.corba.COperationCallerNamesHelper.write (out, $result);
         break;
       }


  /**
  	     * Get a child request this request provides.
  	     */
       case 3:  // RTT/corba/CServiceRequester/getRequest
       {
         String name = in.read_string ();
         RTT.corba.CServiceRequester $result = null;
         $result = this.getRequest (name);
         out = $rh.createReply();
         RTT.corba.CServiceRequesterHelper.write (out, $result);
         break;
       }


  /**
  	     * Has this request a child request with given name ?
  	     */
       case 4:  // RTT/corba/CServiceRequester/hasRequest
       {
         String name = in.read_string ();
         boolean $result = false;
         $result = this.hasRequest (name);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
           * Connects the whole interface to a remote service.
           */
       case 5:  // RTT/corba/CServiceRequester/connectTo
       {
         RTT.corba.CService svc = RTT.corba.CServiceHelper.read (in);
         boolean $result = false;
         $result = this.connectTo (svc);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
  	     * Connets a single operation caller from this interface to
  	     * one with the same name in a remote service.
  	     */
       case 6:  // RTT/corba/CServiceRequester/connectCallerTo
       {
         String name = in.read_string ();
         RTT.corba.CService svc = RTT.corba.CServiceHelper.read (in);
         boolean $result = false;
         $result = this.connectCallerTo (name, svc);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
           * Returns true if all operation callers are connected to
           * the operations of a service.
           */
       case 7:  // RTT/corba/CServiceRequester/ready
       {
         boolean $result = false;
         $result = this.ready ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
  	     * Disconnects a caller.
  	     * @return false if name dit not exist.
  	     */
       case 8:  // RTT/corba/CServiceRequester/disconnectCaller
       {
         String name = in.read_string ();
         boolean $result = false;
         $result = this.disconnectCaller (name);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
           * Checks if a caller is ready.
           * @return false if name dit not exist or not ready.
           */
       case 9:  // RTT/corba/CServiceRequester/callerReady
       {
         String name = in.read_string ();
         boolean $result = false;
         $result = this.callerReady (name);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
           * Disconnects all operation callers.
           */
       case 10:  // RTT/corba/CServiceRequester/disconnect
       {
         this.disconnect ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:RTT/corba/CServiceRequester:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public CServiceRequester _this() 
  {
    return CServiceRequesterHelper.narrow(
    super._this_object());
  }

  public CServiceRequester _this(org.omg.CORBA.ORB orb) 
  {
    return CServiceRequesterHelper.narrow(
    super._this_object(orb));
  }


} // class CServiceRequesterPOA
