package RTT.corba;


/**
* RTT/corba/CServicePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Service.idl
* Wednesday, July 11, 2012 5:27:00 PM CEST
*/


/**
	 * An Orocos Service which hosts operations, attributes and properties.
	 * @ingroup CompIDL
	 */
public abstract class CServicePOA extends org.omg.PortableServer.Servant
 implements RTT.corba.CServiceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getName", new java.lang.Integer (0));
    _methods.put ("getServiceDescription", new java.lang.Integer (1));
    _methods.put ("getProviderNames", new java.lang.Integer (2));
    _methods.put ("getService", new java.lang.Integer (3));
    _methods.put ("hasService", new java.lang.Integer (4));
    _methods.put ("getOperations", new java.lang.Integer (5));
    _methods.put ("getArguments", new java.lang.Integer (6));
    _methods.put ("getArity", new java.lang.Integer (7));
    _methods.put ("getCollectArity", new java.lang.Integer (8));
    _methods.put ("getResultType", new java.lang.Integer (9));
    _methods.put ("getArgumentType", new java.lang.Integer (10));
    _methods.put ("getCollectType", new java.lang.Integer (11));
    _methods.put ("getDescription", new java.lang.Integer (12));
    _methods.put ("checkOperation", new java.lang.Integer (13));
    _methods.put ("callOperation", new java.lang.Integer (14));
    _methods.put ("sendOperation", new java.lang.Integer (15));
    _methods.put ("getAttributeList", new java.lang.Integer (16));
    _methods.put ("getPropertyList", new java.lang.Integer (17));
    _methods.put ("getAttribute", new java.lang.Integer (18));
    _methods.put ("setAttribute", new java.lang.Integer (19));
    _methods.put ("hasAttribute", new java.lang.Integer (20));
    _methods.put ("hasProperty", new java.lang.Integer (21));
    _methods.put ("getProperty", new java.lang.Integer (22));
    _methods.put ("setProperty", new java.lang.Integer (23));
    _methods.put ("getPropertyType", new java.lang.Integer (24));
    _methods.put ("getAttributeType", new java.lang.Integer (25));
    _methods.put ("getPropertyTypeName", new java.lang.Integer (26));
    _methods.put ("getAttributeTypeName", new java.lang.Integer (27));
    _methods.put ("attributeToString", new java.lang.Integer (28));
    _methods.put ("propertyToString", new java.lang.Integer (29));
    _methods.put ("attributeFromString", new java.lang.Integer (30));
    _methods.put ("propertyFromString", new java.lang.Integer (31));
    _methods.put ("isAttributeAssignable", new java.lang.Integer (32));
    _methods.put ("getPorts", new java.lang.Integer (33));
    _methods.put ("getPortDescriptions", new java.lang.Integer (34));
    _methods.put ("getPortType", new java.lang.Integer (35));
    _methods.put ("getDataType", new java.lang.Integer (36));
    _methods.put ("isConnected", new java.lang.Integer (37));
    _methods.put ("disconnectPort", new java.lang.Integer (38));
    _methods.put ("buildChannelOutput", new java.lang.Integer (39));
    _methods.put ("buildChannelInput", new java.lang.Integer (40));
    _methods.put ("createConnection", new java.lang.Integer (41));
    _methods.put ("removeConnection", new java.lang.Integer (42));
    _methods.put ("createStream", new java.lang.Integer (43));
    _methods.put ("removeStream", new java.lang.Integer (44));
    _methods.put ("channelReady", new java.lang.Integer (45));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
  	     * Return the name of this service.
  	     */
       case 0:  // RTT/corba/CService/getName
       {
         String $result = null;
         $result = this.getName ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /**
  	     * Return the description of this service.
  	     */
       case 1:  // RTT/corba/CService/getServiceDescription
       {
         String $result = null;
         $result = this.getServiceDescription ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /**
  	     * Get a list of all the child services this service offers.
  	     */
       case 2:  // RTT/corba/CService/getProviderNames
       {
         String $result[] = null;
         $result = this.getProviderNames ();
         out = $rh.createReply();
         RTT.corba.CServicePackage.CProviderNamesHelper.write (out, $result);
         break;
       }


  /**
  	     * Get a child service this service provides.
  	     */
       case 3:  // RTT/corba/CService/getService
       {
         String name = in.read_string ();
         RTT.corba.CService $result = null;
         $result = this.getService (name);
         out = $rh.createReply();
         RTT.corba.CServiceHelper.write (out, $result);
         break;
       }


  /**
  	     * Has this service a child service with given name ?
  	     */
       case 4:  // RTT/corba/CService/hasService
       {
         String name = in.read_string ();
         boolean $result = false;
         $result = this.hasService (name);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
         * Get a list of all operations.
         */
       case 5:  // RTT/corba/COperationInterface/getOperations
       {
         String $result[] = null;
         $result = this.getOperations ();
         out = $rh.createReply();
         RTT.corba.COperationInterfacePackage.COperationListHelper.write (out, $result);
         break;
       }


  /**
         * Get a list of all arguments of a given operation.
         */
       case 6:  // RTT/corba/COperationInterface/getArguments
       {
         try {
           String operation = in.read_string ();
           RTT.corba.CArgumentDescription $result[] = null;
           $result = this.getArguments (operation);
           out = $rh.createReply();
           RTT.corba.CDescriptionsHelper.write (out, $result);
         } catch (RTT.corba.CNoSuchNameException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchNameExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Returns the number of arguments required in callOperation() and sendOperation() for
         * a given operation.
         */
       case 7:  // RTT/corba/COperationInterface/getArity
       {
         try {
           String operation = in.read_string ();
           short $result = (short)0;
           $result = this.getArity (operation);
           out = $rh.createReply();
           out.write_ushort ($result);
         } catch (RTT.corba.CNoSuchNameException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchNameExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Returns the number of arguments required in CSendHandle::collect() and CSendHandle::collectIfDone() for
         * a given operation.
         */
       case 8:  // RTT/corba/COperationInterface/getCollectArity
       {
         try {
           String operation = in.read_string ();
           short $result = (short)0;
           $result = this.getCollectArity (operation);
           out = $rh.createReply();
           out.write_ushort ($result);
         } catch (RTT.corba.CNoSuchNameException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchNameExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Get a result type of a given operation.
         */
       case 9:  // RTT/corba/COperationInterface/getResultType
       {
         try {
           String operation = in.read_string ();
           String $result = null;
           $result = this.getResultType (operation);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (RTT.corba.CNoSuchNameException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchNameExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Returns the argument or return type name of call as known to the Orocos type system.
         */
       case 10:  // RTT/corba/COperationInterface/getArgumentType
       {
         try {
           String operation = in.read_string ();
           short nbr = in.read_ushort ();
           String $result = null;
           $result = this.getArgumentType (operation, nbr);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (RTT.corba.CNoSuchNameException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchNameExceptionHelper.write (out, $ex);
         } catch (RTT.corba.CWrongArgumentException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CWrongArgumentExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Returns the argument type  of collect as known to the Orocos type system.
         */
       case 11:  // RTT/corba/COperationInterface/getCollectType
       {
         try {
           String operation = in.read_string ();
           short nbr = in.read_ushort ();
           String $result = null;
           $result = this.getCollectType (operation, nbr);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (RTT.corba.CNoSuchNameException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchNameExceptionHelper.write (out, $ex);
         } catch (RTT.corba.CWrongArgumentException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CWrongArgumentExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Get a description of a given operation.
         */
       case 12:  // RTT/corba/COperationInterface/getDescription
       {
         try {
           String operation = in.read_string ();
           String $result = null;
           $result = this.getDescription (operation);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (RTT.corba.CNoSuchNameException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchNameExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Checks if a given operation accepts the list of arguments.
         * If no exception is thrown, the arguments and operation name were valid.
         */
       case 13:  // RTT/corba/COperationInterface/checkOperation
       {
         try {
           String operation = in.read_string ();
           org.omg.CORBA.Any args[] = RTT.corba.CAnyArgumentsHelper.read (in);
           this.checkOperation (operation, args);
           out = $rh.createReply();
         } catch (RTT.corba.CNoSuchNameException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchNameExceptionHelper.write (out, $ex);
         } catch (RTT.corba.CWrongNumbArgException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CWrongNumbArgExceptionHelper.write (out, $ex);
         } catch (RTT.corba.CWrongTypeArgException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CWrongTypeArgExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Call an operation with a list of arguments.
         * This method will block until the operation completes and returns its result.
         */
       case 14:  // RTT/corba/COperationInterface/callOperation
       {
         try {
           String operation = in.read_string ();
           RTT.corba.CAnyArgumentsHolder args = new RTT.corba.CAnyArgumentsHolder ();
           args.value = RTT.corba.CAnyArgumentsHelper.read (in);
           org.omg.CORBA.Any $result = null;
           $result = this.callOperation (operation, args);
           out = $rh.createReply();
           out.write_any ($result);
           RTT.corba.CAnyArgumentsHelper.write (out, args.value);
         } catch (RTT.corba.CNoSuchNameException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchNameExceptionHelper.write (out, $ex);
         } catch (RTT.corba.CWrongNumbArgException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CWrongNumbArgExceptionHelper.write (out, $ex);
         } catch (RTT.corba.CWrongTypeArgException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CWrongTypeArgExceptionHelper.write (out, $ex);
         } catch (RTT.corba.CCallInterrupted $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CCallInterruptedHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Send an operation with a list of arguments.
         * This method will return immediately and return a CSendHandle.
         */
       case 15:  // RTT/corba/COperationInterface/sendOperation
       {
         try {
           String operation = in.read_string ();
           org.omg.CORBA.Any args[] = RTT.corba.CAnyArgumentsHelper.read (in);
           RTT.corba.CSendHandle $result = null;
           $result = this.sendOperation (operation, args);
           out = $rh.createReply();
           RTT.corba.CSendHandleHelper.write (out, $result);
         } catch (RTT.corba.CNoSuchNameException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchNameExceptionHelper.write (out, $ex);
         } catch (RTT.corba.CWrongNumbArgException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CWrongNumbArgExceptionHelper.write (out, $ex);
         } catch (RTT.corba.CWrongTypeArgException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CWrongTypeArgExceptionHelper.write (out, $ex);
         } catch (RTT.corba.CCallInterrupted $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CCallInterruptedHelper.write (out, $ex);
         }
         break;
       }

       case 16:  // RTT/corba/CConfigurationInterface/getAttributeList
       {
         String $result[] = null;
         $result = this.getAttributeList ();
         out = $rh.createReply();
         RTT.corba.CConfigurationInterfacePackage.CAttributeNamesHelper.write (out, $result);
         break;
       }

       case 17:  // RTT/corba/CConfigurationInterface/getPropertyList
       {
         RTT.corba.CConfigurationInterfacePackage.CProperty $result[] = null;
         $result = this.getPropertyList ();
         out = $rh.createReply();
         RTT.corba.CConfigurationInterfacePackage.CPropertyNamesHelper.write (out, $result);
         break;
       }

       case 18:  // RTT/corba/CConfigurationInterface/getAttribute
       {
         String name = in.read_string ();
         org.omg.CORBA.Any $result = null;
         $result = this.getAttribute (name);
         out = $rh.createReply();
         out.write_any ($result);
         break;
       }

       case 19:  // RTT/corba/CConfigurationInterface/setAttribute
       {
         String name = in.read_string ();
         org.omg.CORBA.Any value = in.read_any ();
         boolean $result = false;
         $result = this.setAttribute (name, value);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 20:  // RTT/corba/CConfigurationInterface/hasAttribute
       {
         String name = in.read_string ();
         boolean $result = false;
         $result = this.hasAttribute (name);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 21:  // RTT/corba/CConfigurationInterface/hasProperty
       {
         String name = in.read_string ();
         boolean $result = false;
         $result = this.hasProperty (name);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
  	     * Get a property by name. You can scope the name for
  	     * entering sub-properties. For example 'controlparameters.gains.k'
  	     * to retrieve nested property with name 'k'.
  	     */
       case 22:  // RTT/corba/CConfigurationInterface/getProperty
       {
         String name = in.read_string ();
         org.omg.CORBA.Any $result = null;
         $result = this.getProperty (name);
         out = $rh.createReply();
         out.write_any ($result);
         break;
       }


  /**
  	     * Set a property by name. You can scope the name for
  	     * entering sub-properties. For example 'controlparameters.gains.k'
  	     * to write nested property with name 'k'.
  	     */
       case 23:  // RTT/corba/CConfigurationInterface/setProperty
       {
         String name = in.read_string ();
         org.omg.CORBA.Any value = in.read_any ();
         boolean $result = false;
         $result = this.setProperty (name, value);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
  	     * Return the type of the attribute or property.
  	     */
       case 24:  // RTT/corba/CConfigurationInterface/getPropertyType
       {
         String name = in.read_string ();
         String $result = null;
         $result = this.getPropertyType (name);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 25:  // RTT/corba/CConfigurationInterface/getAttributeType
       {
         String name = in.read_string ();
         String $result = null;
         $result = this.getAttributeType (name);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /**
  	     * Return the type name of the expression as it is known
  	     * to the Orocos Type System.
  	     */
       case 26:  // RTT/corba/CConfigurationInterface/getPropertyTypeName
       {
         String name = in.read_string ();
         String $result = null;
         $result = this.getPropertyTypeName (name);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 27:  // RTT/corba/CConfigurationInterface/getAttributeTypeName
       {
         String name = in.read_string ();
         String $result = null;
         $result = this.getAttributeTypeName (name);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /**
  	     * Return the result of an attribute or property as a text string.
  	     */
       case 28:  // RTT/corba/CConfigurationInterface/attributeToString
       {
         String name = in.read_string ();
         String $result = null;
         $result = this.attributeToString (name);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 29:  // RTT/corba/CConfigurationInterface/propertyToString
       {
         String name = in.read_string ();
         String $result = null;
         $result = this.propertyToString (name);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /**
  	     * Assign a given property or attribute a stringified value.
  	     * @return true if the assignment could be done.
  	     */
       case 30:  // RTT/corba/CConfigurationInterface/attributeFromString
       {
         String name = in.read_string ();
         String value = in.read_string ();
         boolean $result = false;
         $result = this.attributeFromString (name, value);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 31:  // RTT/corba/CConfigurationInterface/propertyFromString
       {
         String name = in.read_string ();
         String value = in.read_string ();
         boolean $result = false;
         $result = this.propertyFromString (name, value);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
  	     * Returns true if the attribute can be changed.
  	     */
       case 32:  // RTT/corba/CConfigurationInterface/isAttributeAssignable
       {
         String name = in.read_string ();
         boolean $result = false;
         $result = this.isAttributeAssignable (name);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  /**
         * Returns the names of the ports of this component.
         */
       case 33:  // RTT/corba/CDataFlowInterface/getPorts
       {
         String $result[] = null;
         $result = this.getPorts ();
         out = $rh.createReply();
         RTT.corba.CDataFlowInterfacePackage.CPortNamesHelper.write (out, $result);
         break;
       }


  /**
         * Returns the names of the ports of this component.
         */
       case 34:  // RTT/corba/CDataFlowInterface/getPortDescriptions
       {
         RTT.corba.CPortDescription $result[] = null;
         $result = this.getPortDescriptions ();
         out = $rh.createReply();
         RTT.corba.CDataFlowInterfacePackage.CPortDescriptionsHelper.write (out, $result);
         break;
       }


  /**
         * Returns the type of the given port
         */
       case 35:  // RTT/corba/CDataFlowInterface/getPortType
       {
         try {
           String port_name = in.read_string ();
           RTT.corba.CPortType $result = null;
           $result = this.getPortType (port_name);
           out = $rh.createReply();
           RTT.corba.CPortTypeHelper.write (out, $result);
         } catch (RTT.corba.CNoSuchPortException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchPortExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Returns the data type for the given port
         */
       case 36:  // RTT/corba/CDataFlowInterface/getDataType
       {
         try {
           String port_name = in.read_string ();
           String $result = null;
           $result = this.getDataType (port_name);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (RTT.corba.CNoSuchPortException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchPortExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Check if the given port is already connected to something
         */
       case 37:  // RTT/corba/CDataFlowInterface/isConnected
       {
         try {
           String port_name = in.read_string ();
           boolean $result = false;
           $result = this.isConnected (port_name);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (RTT.corba.CNoSuchPortException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchPortExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Disconnects this port from all connections it is part of.
         * @see CChannelElement::disconnect() to disconnect a single Channel.
         */
       case 38:  // RTT/corba/CDataFlowInterface/disconnectPort
       {
         try {
           String port_name = in.read_string ();
           this.disconnectPort (port_name);
           out = $rh.createReply();
         } catch (RTT.corba.CNoSuchPortException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchPortExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Use this to write to an input port with
         * the given policy.
         * Some protocols may adjust the policy, or pass additional information
         * into the policy, such as the name of the newly created connection.
         *
         * The returned channel element will not be functional until
         * channelReady() has been called for it
         */
       case 39:  // RTT/corba/CDataFlowInterface/buildChannelOutput
       {
         try {
           String input_port = in.read_string ();
           RTT.corba.CConnPolicyHolder policy = new RTT.corba.CConnPolicyHolder ();
           policy.value = RTT.corba.CConnPolicyHelper.read (in);
           RTT.corba.CChannelElement $result = null;
           $result = this.buildChannelOutput (input_port, policy);
           out = $rh.createReply();
           RTT.corba.CChannelElementHelper.write (out, $result);
           RTT.corba.CConnPolicyHelper.write (out, policy.value);
         } catch (RTT.corba.CNoCorbaTransport $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoCorbaTransportHelper.write (out, $ex);
         } catch (RTT.corba.CNoSuchPortException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchPortExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Use this to read from an output port with
         * the given policy.
         * Some protocols may adjust the policy, or pass additional information
         * into the policy, such as the name of the newly created connection.
         */
       case 40:  // RTT/corba/CDataFlowInterface/buildChannelInput
       {
         try {
           String output_port = in.read_string ();
           RTT.corba.CConnPolicyHolder policy = new RTT.corba.CConnPolicyHolder ();
           policy.value = RTT.corba.CConnPolicyHelper.read (in);
           RTT.corba.CChannelElement $result = null;
           $result = this.buildChannelInput (output_port, policy);
           out = $rh.createReply();
           RTT.corba.CChannelElementHelper.write (out, $result);
           RTT.corba.CConnPolicyHelper.write (out, policy.value);
         } catch (RTT.corba.CNoCorbaTransport $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoCorbaTransportHelper.write (out, $ex);
         } catch (RTT.corba.CNoSuchPortException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchPortExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Connect the given named port to the given remote port.
         * Use this method to connect two Orocos data flow ports.
         *
         * The local port needs to be the output, while the remote port is the
         * input. In case you only want to write a port without using this function,
         * use buildChannelOutput. For only reading a port, use buildChannelInput.
         *
         * This method combines both buildChannelOutput() and buildChannelInput() and is
         * generally better in setting up and checking a data flow connection between
         * two ports than the separate methods.
         *
         * This method will call the \a remote_ports interface back to orchestrate
         * the connection building.
         *
         * @see removeConnection() to remove this connection again.
         */
       case 41:  // RTT/corba/CDataFlowInterface/createConnection
       {
         try {
           String local_port = in.read_string ();
           RTT.corba.CDataFlowInterface remote_ports = RTT.corba.CDataFlowInterfaceHelper.read (in);
           String remote_port = in.read_string ();
           RTT.corba.CConnPolicyHolder policy = new RTT.corba.CConnPolicyHolder ();
           policy.value = RTT.corba.CConnPolicyHelper.read (in);
           boolean $result = false;
           $result = this.createConnection (local_port, remote_ports, remote_port, policy);
           out = $rh.createReply();
           out.write_boolean ($result);
           RTT.corba.CConnPolicyHelper.write (out, policy.value);
         } catch (RTT.corba.CNoSuchPortException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchPortExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Removes the specified connection created with createConnection.
         */
       case 42:  // RTT/corba/CDataFlowInterface/removeConnection
       {
         try {
           String local_port = in.read_string ();
           RTT.corba.CDataFlowInterface remote_ports = RTT.corba.CDataFlowInterfaceHelper.read (in);
           String remote_port = in.read_string ();
           boolean $result = false;
           $result = this.removeConnection (local_port, remote_ports, remote_port);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (RTT.corba.CNoSuchPortException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchPortExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Create an out-of-band data stream with a given policy.
         * You may specify a name_id in the policy object, or if left empty,
         * a name will be chosen for you.
         */
       case 43:  // RTT/corba/CDataFlowInterface/createStream
       {
         try {
           String local_port = in.read_string ();
           RTT.corba.CConnPolicyHolder policy = new RTT.corba.CConnPolicyHolder ();
           policy.value = RTT.corba.CConnPolicyHelper.read (in);
           boolean $result = false;
           $result = this.createStream (local_port, policy);
           out = $rh.createReply();
           out.write_boolean ($result);
           RTT.corba.CConnPolicyHelper.write (out, policy.value);
         } catch (RTT.corba.CNoSuchPortException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchPortExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Removes a stream added with createStream.
         * @param local_port The port to remove the stream from.
         * @param stream_name The name_id returned in the CConnPolicy object
         * after the call to createStream.
         */
       case 44:  // RTT/corba/CDataFlowInterface/removeStream
       {
         try {
           String local_port = in.read_string ();
           String stream_name = in.read_string ();
           this.removeStream (local_port, stream_name);
           out = $rh.createReply();
         } catch (RTT.corba.CNoSuchPortException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchPortExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
         * Checks if the connection channel elements are ready for a given
         * input port.
         * This is typically called by the createConnection setup logic to see
         * if the input side agrees with the connection and can use it.
         * For example, the input port can use this opportunity to check the
         *
         * @throw CNoSuchPortException if input_port is not an input port
         * or not present in this interface.
         * @return false if the connection could not be used.
         */
       case 45:  // RTT/corba/CDataFlowInterface/channelReady
       {
         try {
           String input_port = in.read_string ();
           RTT.corba.CChannelElement channel = RTT.corba.CChannelElementHelper.read (in);
           boolean $result = false;
           $result = this.channelReady (input_port, channel);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (RTT.corba.CNoSuchPortException $ex) {
           out = $rh.createExceptionReply ();
           RTT.corba.CNoSuchPortExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:RTT/corba/CService:1.0", 
    "IDL:RTT/corba/COperationInterface:1.0", 
    "IDL:RTT/corba/CConfigurationInterface:1.0", 
    "IDL:RTT/corba/CDataFlowInterface:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public CService _this() 
  {
    return CServiceHelper.narrow(
    super._this_object());
  }

  public CService _this(org.omg.CORBA.ORB orb) 
  {
    return CServiceHelper.narrow(
    super._this_object(orb));
  }


} // class CServicePOA
