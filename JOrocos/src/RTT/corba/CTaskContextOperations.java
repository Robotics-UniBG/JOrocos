package RTT.corba;


/**
* RTT/corba/CTaskContextOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from TaskContext.idl
* Wednesday, July 11, 2012 5:27:10 PM CEST
*/


/**
	 * A CTaskContext is the main entry point of a distributed
	 * component and maps to a RTT::TaskContext.
	 * @ingroup CompIDL
	 */
public interface CTaskContextOperations 
{

  /**
  	     * Return the instance name of this component.
  	     */
  String getName ();

  /**
  	     * Return the description of this component.
  	     */
  String getDescription ();

  /**
  	     * Returns the current state of the component.
  	     */
  RTT.corba.CTaskState getTaskState ();

  /**
  	     * Configure this component.
  	     * @see RTT::base::TaskCore::configure()
  	     */
  boolean configure ();

  /**
  	     * Start this component.
  	     * @see RTT::base::TaskCore::start()
  	     */
  boolean start ();

  /**
  	     * Activate this component.
  	     * @see RTT::base::TaskCore::activate()
  	     */
  boolean activate ();

  /**
  	     * Stop this component.
  	     * @see RTT::base::TaskCore::stop()
  	     */
  boolean stop ();

  /**
  	     * Asks the component to transition from an Exception state to the
  	     * Stopped state
  
  	     * @see RTT::base::TaskCore::exception() and
  	     * RTT::base::TaskCore::recover()
  	     */
  boolean resetException ();

  /**
  	     * Cleanup this component.
  	     * @see RTT::base::TaskCore::cleanup()
  	     */
  boolean cleanup ();

  /**
  	     * Is this component's ExecutionEngine active ?
  	     * @see RTT::base::TaskCore::isActive()
  	     */
  boolean isActive ();

  /**
  	     * Is this component running ?
  	     * @see RTT::base::TaskCore::isRunning()
  	     */
  boolean isRunning ();

  /**
  	     * Is this component configured ?
  	     * @see RTT::base::TaskCore::isConfigured()
  	     */
  boolean isConfigured ();

  /**
  	     * Is this component in a Fatal error state ?
  	     * @see RTT::base::TaskCore::inFatalError()
  	     */
  boolean inFatalError ();

  /**
  	     * Is this component in a RunTime error state ?
  	     * @see RTT::base::TaskCore::inRunTimeError()
  	     */
  boolean inRunTimeError ();

  /**
  	     * Access to the Data Flow ports.
  	     * @see RTT::base::TaskCore::ports()
  	     */
  RTT.corba.CDataFlowInterface ports ();

  /**
  	     * Get a service.
               *
               * Use 'this' as the name to get the task context's own service
               * provider
               *
  	     * @see RTT::TaskContext::provides()
  	     */
  RTT.corba.CService getProvider (String service_name);

  /**
  	     * Get a required service.
  	     * @see RTT::TaskContext::requires()
  	     */
  RTT.corba.CServiceRequester getRequester (String service_name);

  /**
  	     * Get a list of all the peers this task is connected to.
  	     * @see RTT::TaskContext::getPeerList()
  	     */
  String[] getPeerList ();

  /**
  	     * Get a peer this task is connected to.
  	     * @see RTT::TaskContext::getPeer()
  	     */
  RTT.corba.CTaskContext getPeer (String name);

  /**
  	     * Has this task a peer with given name ?
  	     * @see RTT::TaskContext::hasPeer()
  	     */
  boolean hasPeer (String name);

  /**
  	     * Add a one-way peer connection.
  	     * @see RTT::TaskContext::addPeer()
  	     */
  boolean addPeer (RTT.corba.CTaskContext p, String peer_alias);

  /**
  	     * Remove a one-way peer connection.
  	     * @see RTT::TaskContext::removePeer()
  	     */
  boolean removePeer (String name);

  /**
  	     * Create a two-way peer connection.
  	     * @see RTT::TaskContext::connectPeers()
  	     */
  boolean connectPeers (RTT.corba.CTaskContext p);

  /**
  	     * Destroy a two-way peer connection.
  	     * @see RTT::TaskContext::disconnectPeers()
  	     */
  boolean disconnectPeers (String name);

  /**
  	     * Connect all compatible and equally named
  	     * data ports with another CTaskContext's
  	     * data ports.
  	     * @see RTT::TaskContext::connectPorts()
  	     */
  boolean connectPorts (RTT.corba.CTaskContext p);

  /**
  	     * Connect all compatible and equally named
  	     * services with another CTaskContext's
  	     * services.
  	     * @see RTT::TaskContext::connectServices()
  	     */
  boolean connectServices (RTT.corba.CTaskContext p);
} // interface CTaskContextOperations
