package RTT.corba;


/**
* RTT/corba/CSendHandleOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from OperationInterface.idl
* Wednesday, July 11, 2012 5:26:50 PM CEST
*/


/**
     * A handler object that allows us to collect the results
     * of a send. Due to memory restrictions, a server may choose
     * to cleanup a CSendHandle before or during collect() was called.
     * This is equivalent to having a SendError.
     */
public interface CSendHandleOperations 
{
  RTT.corba.CSendStatus collect (RTT.corba.CAnyArgumentsHolder args);
  RTT.corba.CSendStatus collectIfDone (RTT.corba.CAnyArgumentsHolder args);

  /**
           * Just checks what the status is.
           */
  RTT.corba.CSendStatus checkStatus ();

  /**
           * Returns only the return value, when checkStatus() returns CSendSuccess.
           * Convenient if the sent method only returns a value.
           */
  org.omg.CORBA.Any ret ();

  /**
         * Checks if this handle returns these arguments in collect() and collectIfDone().
         * You can use this to check if collect() or collectIfDone() return what you expect.
         * If no exception is thrown, the arguments are of the correct number
         * and type. The values in \a args are ignored and not stored, only the types of the anys are checked.
         * One could obtain the same information by using COperationInterface::getCollectType()
         * for 1..COperationInterface::getCollectArity().
         */
  void checkArguments (org.omg.CORBA.Any[] args) throws RTT.corba.CWrongNumbArgException, RTT.corba.CWrongTypeArgException;

  /**
         * Clients need to call this after they have finished using this
         * CSendHandle object. After dispose(), this object may no longer
         * be used.
         */
  void dispose ();
} // interface CSendHandleOperations
